!function(t,n){"object"==typeof exports&&"undefined"!=typeof module?module.exports=n():"function"==typeof define&&define.amd?define(n):t.Keyvalide=n()}(this,function(){"use strict";var t=["A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z","0","1","2","3","4","5","6","7","8","9","+","/"],n=function(t){for(var n=new Array;t>0;){var e=t%2;t=Math.floor(t/2),n.push(e)}return n.reverse(),n},e=function(t){for(var n=0,e=0,r=t.length-1;r>=0;--r){1==t[r]&&(n+=Math.pow(2,e)),++e}return n},r=function(t,n){for(var e=8-(t+1)+6*(t-1),r=n.length,i=e-r;--i>=0;)n.unshift(0);for(var o=[],s=t;--s>=0;)o.push(1);o.push(0);for(var a=0,c=8-(t+1);a<c;++a)o.push(n[a]);for(var f=0;f<t-1;++f){o.push(1),o.push(0);for(var h=6;--h>=0;)o.push(n[a++])}return o},i={hexToBase64:function(t){return btoa(t.match(/\w{2}/g).map(function(t){return String.fromCharCode(parseInt(t,16))}).join("")).replace("/","_").replace("+","-").replace("=","")},encoder:function(i){for(var o=[],s=[],a=0,c=i.length;a<c;++a){var f=i.charCodeAt(a),h=n(f);if(f<128){for(var u=8-h.length;--u>=0;)h.unshift(0);s=s.concat(h)}else f>=128&&f<=2047?s=s.concat(r(2,h)):f>=2048&&f<=65535?s=s.concat(r(3,h)):f>=65536&&f<=2097151?s=s.concat(r(4,h)):f>=2097152&&f<=67108863?s=s.concat(r(5,h)):f>=4e6&&f<=2147483647&&(s=s.concat(r(6,h)))}for(var l=0,a=0,c=s.length;a<c;a+=6){var p=a+6-c;2==p?l=2:4==p&&(l=4);for(var d=l;--d>=0;)s.push(0);o.push(e(s.slice(a,a+6)))}for(var v="",a=0,c=o.length;a<c;++a)v+=t[o[a]];for(var a=0,c=l/2;a<c;++a)v+="=";return v},decoder:function(r){var i=r.length,o=0;"="==r.charAt(i-1)&&("="==r.charAt(i-2)?(o=4,r=r.substring(0,i-2)):(o=2,r=r.substring(0,i-1)));for(var s=[],a=0,c=r.length;a<c;++a)for(var f=r.charAt(a),h=0,u=t.length;h<u;++h)if(f==t[h]){var l=n(h),p=l.length;if(6-p>0)for(var d=6-p;d>0;--d)l.unshift(0);s=s.concat(l);break}o>0&&(s=s.slice(0,s.length-o));for(var v=[],g=[],a=0,c=s.length;a<c;)if(0==s[a])v=v.concat(e(s.slice(a,a+8))),a+=8;else{for(var y=0;a<c&&1==s[a];)++y,++a;for(g=g.concat(s.slice(a+1,a+8-y)),a+=8-y;y>1;)g=g.concat(s.slice(a+2,a+8)),a+=8,--y;v=v.concat(e(g)),g=[]}for(var _="",a=0,c=v.length;a<c;++a)_+=String.fromCharCode(v[a]);return _}},o=o||function(t,n){var e={},r=e.lib={},i=function(){},o=r.Base={extend:function(t){i.prototype=this;var n=new i;return t&&n.mixIn(t),n.hasOwnProperty("init")||(n.init=function(){n.$super.init.apply(this,arguments)}),n.init.prototype=n,n.$super=this,n},create:function(){var t=this.extend();return t.init.apply(t,arguments),t},init:function(){},mixIn:function(t){for(var n in t)t.hasOwnProperty(n)&&(this[n]=t[n]);t.hasOwnProperty("toString")&&(this.toString=t.toString)},clone:function(){return this.init.prototype.extend(this)}},s=r.WordArray=o.extend({init:function(t,n){t=this.words=t||[],this.sigBytes=void 0!=n?n:4*t.length},toString:function(t){return(t||c).stringify(this)},concat:function(t){var n=this.words,e=t.words,r=this.sigBytes;if(t=t.sigBytes,this.clamp(),r%4)for(var i=0;i<t;i++)n[r+i>>>2]|=(e[i>>>2]>>>24-i%4*8&255)<<24-(r+i)%4*8;else if(65535<e.length)for(i=0;i<t;i+=4)n[r+i>>>2]=e[i>>>2];else n.push.apply(n,e);return this.sigBytes+=t,this},clamp:function(){var n=this.words,e=this.sigBytes;n[e>>>2]&=4294967295<<32-e%4*8,n.length=t.ceil(e/4)},clone:function(){var t=o.clone.call(this);return t.words=this.words.slice(0),t},random:function(n){for(var e=[],r=0;r<n;r+=4)e.push(4294967296*t.random()|0);return new s.init(e,n)}}),a=e.enc={},c=a.Hex={stringify:function(t){var n=t.words;t=t.sigBytes;for(var e=[],r=0;r<t;r++){var i=n[r>>>2]>>>24-r%4*8&255;e.push((i>>>4).toString(16)),e.push((15&i).toString(16))}return e.join("")},parse:function(t){for(var n=t.length,e=[],r=0;r<n;r+=2)e[r>>>3]|=parseInt(t.substr(r,2),16)<<24-r%8*4;return new s.init(e,n/2)}},f=a.Latin1={stringify:function(t){var n=t.words;t=t.sigBytes;for(var e=[],r=0;r<t;r++)e.push(String.fromCharCode(n[r>>>2]>>>24-r%4*8&255));return e.join("")},parse:function(t){for(var n=t.length,e=[],r=0;r<n;r++)e[r>>>2]|=(255&t.charCodeAt(r))<<24-r%4*8;return new s.init(e,n)}},h=a.Utf8={stringify:function(t){try{return decodeURIComponent(escape(f.stringify(t)))}catch(t){throw Error("Malformed UTF-8 data")}},parse:function(t){return f.parse(unescape(encodeURIComponent(t)))}},u=r.BufferedBlockAlgorithm=o.extend({reset:function(){this._data=new s.init,this._nDataBytes=0},_append:function(t){"string"==typeof t&&(t=h.parse(t)),this._data.concat(t),this._nDataBytes+=t.sigBytes},_process:function(n){var e=this._data,r=e.words,i=e.sigBytes,o=this.blockSize,a=i/(4*o),a=n?t.ceil(a):t.max((0|a)-this._minBufferSize,0);if(n=a*o,i=t.min(4*n,i),n){for(var c=0;c<n;c+=o)this._doProcessBlock(r,c);c=r.splice(0,n),e.sigBytes-=i}return new s.init(c,i)},clone:function(){var t=o.clone.call(this);return t._data=this._data.clone(),t},_minBufferSize:0});r.Hasher=u.extend({cfg:o.extend(),init:function(t){this.cfg=this.cfg.extend(t),this.reset()},reset:function(){u.reset.call(this),this._doReset()},update:function(t){return this._append(t),this._process(),this},finalize:function(t){return t&&this._append(t),this._doFinalize()},blockSize:16,_createHelper:function(t){return function(n,e){return new t.init(e).finalize(n)}},_createHmacHelper:function(t){return function(n,e){return new l.HMAC.init(t,e).finalize(n)}}});var l=e.algo={};return e}(Math);!function(t){for(var n=o,e=n.lib,r=e.WordArray,i=e.Hasher,e=n.algo,s=[],a=[],c=function(t){return 4294967296*(t-(0|t))|0},f=2,h=0;64>h;){var u;t:{u=f;for(var l=t.sqrt(u),p=2;p<=l;p++)if(!(u%p)){u=!1;break t}u=!0}u&&(8>h&&(s[h]=c(t.pow(f,.5))),a[h]=c(t.pow(f,1/3)),h++),f++}var d=[],e=e.SHA256=i.extend({_doReset:function(){this._hash=new r.init(s.slice(0))},_doProcessBlock:function(t,n){for(var e=this._hash.words,r=e[0],i=e[1],o=e[2],s=e[3],c=e[4],f=e[5],h=e[6],u=e[7],l=0;64>l;l++){if(16>l)d[l]=0|t[n+l];else{var p=d[l-15],v=d[l-2];d[l]=((p<<25|p>>>7)^(p<<14|p>>>18)^p>>>3)+d[l-7]+((v<<15|v>>>17)^(v<<13|v>>>19)^v>>>10)+d[l-16]}p=u+((c<<26|c>>>6)^(c<<21|c>>>11)^(c<<7|c>>>25))+(c&f^~c&h)+a[l]+d[l],v=((r<<30|r>>>2)^(r<<19|r>>>13)^(r<<10|r>>>22))+(r&i^r&o^i&o),u=h,h=f,f=c,c=s+p|0,s=o,o=i,i=r,r=p+v|0}e[0]=e[0]+r|0,e[1]=e[1]+i|0,e[2]=e[2]+o|0,e[3]=e[3]+s|0,e[4]=e[4]+c|0,e[5]=e[5]+f|0,e[6]=e[6]+h|0,e[7]=e[7]+u|0},_doFinalize:function(){var n=this._data,e=n.words,r=8*this._nDataBytes,i=8*n.sigBytes;return e[i>>>5]|=128<<24-i%32,e[14+(i+64>>>9<<4)]=t.floor(r/4294967296),e[15+(i+64>>>9<<4)]=r,n.sigBytes=4*e.length,this._process(),this._hash},clone:function(){var t=i.clone.call(this);return t._hash=this._hash.clone(),t}});n.SHA256=i._createHelper(e),n.HmacSHA256=i._createHmacHelper(e)}(Math),function(){var t=o,n=t.enc.Utf8;t.algo.HMAC=t.lib.Base.extend({init:function(t,e){t=this._hasher=new t.init,"string"==typeof e&&(e=n.parse(e));var r=t.blockSize,i=4*r;e.sigBytes>i&&(e=t.finalize(e)),e.clamp();for(var o=this._oKey=e.clone(),s=this._iKey=e.clone(),a=o.words,c=s.words,f=0;f<r;f++)a[f]^=1549556828,c[f]^=909522486;o.sigBytes=s.sigBytes=i,this.reset()},reset:function(){var t=this._hasher;t.reset(),t.update(this._iKey)},update:function(t){return this._hasher.update(t),this},finalize:function(t){var n=this._hasher;return t=n.finalize(t),n.reset(),n.finalize(this._oKey.clone().concat(t))}})}();var s=function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")},a=function(){function t(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(n,e,r){return e&&t(n.prototype,e),r&&t(n,r),n}}();return function(){function t(n){s(this,t),this.key="EnuDefI42DQ",this.payload=n}return a(t,[{key:"token",value:function(){var t=i.encoder('{"typ":"JWT","alg":"HS256"}'),n=i.encoder(this.payload),e=t+"."+n,r=o.HmacSHA256(e,this.key);return e+"."+i.hexToBase64(r.toString())}}]),t}()});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
